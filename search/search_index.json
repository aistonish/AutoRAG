{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u200bHatchlor demo project","text":"<p>Python project featuring the Python project manager hatch powerd by the Hatchlor.</p>"},{"location":"#navigation","title":"Navigation","text":"<p>Documentation for specific <code>MAJOR.MINOR</code> versions can be chosen by using the dropdown on the top of every page. The <code>dev</code> version reflects changes that have not yet been released. Shortcuts can be used for navigation, i.e. ,/p and ./n for previous and next page, respectively, as well as //s for searching.</p>"},{"location":"authors/","title":"Authors","text":""},{"location":"authors/#contributors","title":"Contributors","text":"<ul> <li>AIstonish</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#version-001-development","title":"Version 0.0.1 (development)","text":"<ul> <li>First pre-alpha</li> <li>...</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Welcome to the contributor guide of autorag.</p> <p>This document focuses on getting any potential contributor familiarized with the development processes, but other kinds of contributions are also appreciated.</p> <p>If you are new to using git or have never collaborated in a project previously, please have a look at contribution-guide.org. Other resources are also listed in the excellent guide created by FreeCodeCamp <sup>1</sup>.</p> <p>Please notice, all users and contributors are expected to be open, considerate, reasonable, and respectful. When in doubt, Python Software Foundation's Code of Conduct is a good reference in terms of behavior guidelines.</p>"},{"location":"contributing/#issue-reports","title":"Issue Reports","text":"<p>If you experience bugs or general issues with autorag, please have a look on the issue tracker. If you don't see anything useful there, please feel free to fire an issue report.</p> <p>Tip</p> <p>Please don't forget to include the closed issues in your search. Sometimes a solution was already reported, and the problem is considered solved.</p> <p>New issue reports should include information about your programming environment (e.g., operating system, Python version) and steps to reproduce the problem. Please try also to simplify the reproduction steps to a very minimal example that still illustrates the problem you are facing. By removing other factors, you help us to identify the root cause of the issue.</p>"},{"location":"contributing/#documentation-improvements","title":"Documentation improvements","text":"<p>You can help improve the documentation of autorag by making them more readable and coherent, or by adding missing information and correcting mistakes.</p> <p>This documentation uses mkdocs as its main documentation compiler. This means that the docs are kept in the same repository as the project code, and that any documentation update is done in the same way was a code contribution.</p> <p>Tip</p> <p>Please notice that the GitHub web interface provides a quick way for   proposing changes. While this mechanism can  be tricky for normal code contributions,   it works perfectly fine for contributing to the docs, and can be quite handy.</p> <p>If you are interested in trying this method out, please navigate to   the <code>docs</code> folder in the source repository, find which file you   would like to propose changes and click in the little pencil icon at the   top, to open [GitHub's code editor]. Once you finish editing the file,   please write a message in the form at the bottom of the page describing   which changes have you made and what are the motivations behind them and   submit your proposal.</p> <p>When working on documentation changes in your local machine, you can build and serve them using hatch with <code>hatch run docs:build</code> and <code>hatch run docs:serve</code>, respectively.</p>"},{"location":"contributing/#code-contributions","title":"Code Contributions","text":""},{"location":"contributing/#submit-an-issue","title":"Submit an issue","text":"<p>Before you work on any non-trivial code contribution it's best to first create a report in the issue tracker to start a discussion on the subject. This often provides additional considerations and avoids unnecessary work.</p>"},{"location":"contributing/#clone-the-repository","title":"Clone the repository","text":"<ol> <li> <p>Create a user account on GitHub if you do not already have one.</p> </li> <li> <p>Fork the project repository: click on the Fork button near the top of the    page. This creates a copy of the code under your account on GitHub.</p> </li> <li> <p>Clone this copy to your local disk:</p> </li> </ol> <pre><code>git clone git@github.com:YourLogin/autorag.git\ncd autorag\n</code></pre> <ol> <li>Make sure hatch is installed using pipx:</li> </ol> <pre><code>pipx install hatch\n</code></pre> <ol> <li>[only once] install pre-commit hooks in the default environment with:</li> </ol> <pre><code>hatch run pre-commit install\n</code></pre>"},{"location":"contributing/#implement-your-changes","title":"Implement your changes","text":"<ol> <li>Create a branch to hold your changes:</li> </ol> <pre><code>git checkout -b my-feature\n</code></pre> <p>and start making changes. Never work on the main branch!</p> <ol> <li> <p>Start your work on this branch. Don't forget to add docstrings in Google style    to new functions, modules and classes, especially if they are part of public APIs.</p> </li> <li> <p>Add yourself to the list of contributors in <code>AUTHORS.md</code>.</p> </li> <li> <p>When you\u2019re done editing, do:</p> </li> </ol> <pre><code>git add &lt;MODIFIED FILES&gt;\ngit commit\n</code></pre> <p>to record your changes in git.</p> <p>Please make sure to see the validation messages from pre-commit and fix    any eventual issues.    This should automatically use flake8/black to check/fix the code style    in a way that is compatible with the project.</p> <pre><code>!!! info\n    Don't forget to add unit tests and documentation in case your\n    contribution adds a feature and is not just a bugfix.\n\n    Moreover, writing an [descriptive commit message] is highly recommended.\n    In case of doubt, you can check the commit history with:\n    ```\n    git log --graph --decorate --pretty=oneline --abbrev-commit --all\n    ```\n    to look for recurring communication patterns.\n</code></pre> <ol> <li>Please check that your changes don't break any unit tests with    <code>hatch run test:cov</code> or <code>hatch run test:no-cov</code> to run the unitest with    or without coverage reports, respectively.</li> </ol>"},{"location":"contributing/#submit-your-contribution","title":"Submit your contribution","text":"<ol> <li>If everything works fine, push your local branch to the remote server with:</li> </ol> <pre><code>git push -u origin my-feature\n</code></pre> <ol> <li>Go to the web page of your fork and click \"Create pull request\"    to send your changes for review.</li> </ol> <p>Find more detailed information in creating a PR. You might also want to open    the PR as a draft first and mark it as ready for review after the feedbacks    from the continuous integration (CI) system or any required fixes.</p> <ol> <li> <p>Even though, these resources focus on open source projects and communities, the general ideas behind collaborating with other developers to collectively create software are general and can be applied to all sorts of environments, including private companies and proprietary code bases.\u00a0\u21a9</p> </li> </ol>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright \u00a9 2024, AIstonish</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>autorag<ul> <li>cli</li> <li>init<ul> <li>generate_system_specs</li> <li>system_specs</li> </ul> </li> <li>logging</li> </ul> </li> </ul>"},{"location":"reference/autorag/","title":"Reference","text":""},{"location":"reference/autorag/#autorag","title":"<code>autorag</code>","text":""},{"location":"reference/autorag/#autorag.__version__","title":"<code>__version__ = version('autorag')</code>  <code>module-attribute</code>","text":""},{"location":"reference/autorag/cli/","title":"Cli","text":""},{"location":"reference/autorag/cli/#autorag.cli","title":"<code>cli</code>","text":""},{"location":"reference/autorag/cli/#autorag.cli.ExistingSpecFileType","title":"<code>ExistingSpecFileType = Annotated[Path, typer.Option(help='The location of the system specs file.', exists=True, file_okay=True, readable=True, resolve_path=True)]</code>  <code>module-attribute</code>","text":""},{"location":"reference/autorag/cli/#autorag.cli.NonExistingSpecFileType","title":"<code>NonExistingSpecFileType = Annotated[Path, typer.Option(help='The location of the system specs file.', exists=False, resolve_path=True)]</code>  <code>module-attribute</code>","text":""},{"location":"reference/autorag/cli/#autorag.cli.__home__","title":"<code>__home__ = Path.home()</code>  <code>module-attribute</code>","text":""},{"location":"reference/autorag/cli/#autorag.cli.app","title":"<code>app = typer.Typer(name=f'AutoRAG {__version__}', help='AutoRAG: Unleash On-Premise RAG Solutions for Enhanced Business Performance.', rich_markup_mode='rich', no_args_is_help=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/autorag/cli/#autorag.cli.init","title":"<code>init(specs_file: NonExistingSpecFileType = Path(f'{__home__}/.autorag/init/specs.yaml'), *, force: Annotated[bool, typer.Option(help='If true, it overwrites existing specs file.')] = False, log_level: Annotated[LogLevel, typer.Option(help='Sets the Log Level')] = LogLevel.INFO) -&gt; None</code>","text":"<p> Initialize AutoRAG by generating the system specs file</p> Source code in <code>src/autorag/cli.py</code> <pre><code>@app.command(\"init\")\ndef init(\n    specs_file: NonExistingSpecFileType = Path(f\"{__home__}/.autorag/init/specs.yaml\"),\n    *,\n    force: Annotated[\n        bool,\n        typer.Option(\n            help=\"If true, it overwrites existing specs file.\",\n        ),\n    ] = False,\n    log_level: Annotated[LogLevel, typer.Option(help=\"Sets the Log Level\")] = LogLevel.INFO,\n) -&gt; None:\n    \"\"\"\n    :rocket: Initialize AutoRAG:sparkles: by generating the system specs file\n    \"\"\"\n    print(f\"AutoRAG Version: {__version__}\")  # noqa: T201\n    setup_logging(log_level)\n    generate_system_specs(\n        specs_file=specs_file,\n        force=force,\n    )\n</code></pre>"},{"location":"reference/autorag/cli/#autorag.cli.main","title":"<code>main() -&gt; None</code>","text":"Source code in <code>src/autorag/cli.py</code> <pre><code>def main() -&gt; None:\n    app()\n</code></pre>"},{"location":"reference/autorag/cli/#autorag.cli.print_specs","title":"<code>print_specs(specs_file: ExistingSpecFileType = Path(f'{__home__}/.autorag/init/specs.yaml'), log_level: Annotated[LogLevel, typer.Option(help='Sets the Log Level')] = LogLevel.INFO) -&gt; None</code>","text":"<p> Print the generated system specs file</p> Source code in <code>src/autorag/cli.py</code> <pre><code>@app.command(\"print-specs\")\ndef print_specs(\n    specs_file: ExistingSpecFileType = Path(f\"{__home__}/.autorag/init/specs.yaml\"),\n    log_level: Annotated[LogLevel, typer.Option(help=\"Sets the Log Level\")] = LogLevel.INFO,\n) -&gt; None:\n    \"\"\"\n    :mag: Print the generated system specs file\n    \"\"\"\n    print(f\"AutoRAG Version: {__version__}\")  # noqa: T201\n    setup_logging(log_level)\n    print_system_specs(specs_file)\n</code></pre>"},{"location":"reference/autorag/cli/#autorag.cli.version","title":"<code>version() -&gt; None</code>","text":"<p> Print the version of AutoRAG</p> Source code in <code>src/autorag/cli.py</code> <pre><code>@app.command(\"version\")\ndef version() -&gt; None:\n    \"\"\"\n    :bookmark: Print the version of AutoRAG:sparkles:\n    \"\"\"\n    print(f\"AutoRAG Version: {__version__}\")  # noqa: T201\n    raise SystemExit()\n</code></pre>"},{"location":"reference/autorag/logging/","title":"Logging","text":""},{"location":"reference/autorag/logging/#autorag.logging","title":"<code>logging</code>","text":""},{"location":"reference/autorag/logging/#autorag.logging.logger","title":"<code>logger = logging.getLogger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/autorag/logging/#autorag.logging.LogLevel","title":"<code>LogLevel</code>","text":""},{"location":"reference/autorag/logging/#autorag.logging.LogLevel.CRITICAL","title":"<code>CRITICAL = 'critical'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/logging/#autorag.logging.LogLevel.DEBUG","title":"<code>DEBUG = 'debug'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/logging/#autorag.logging.LogLevel.ERROR","title":"<code>ERROR = 'error'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/logging/#autorag.logging.LogLevel.INFO","title":"<code>INFO = 'info'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/logging/#autorag.logging.LogLevel.WARNING","title":"<code>WARNING = 'warning'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/logging/#autorag.logging.setup_logging","title":"<code>setup_logging(log_level: LogLevel = LogLevel.INFO)</code>","text":"<p>Setup basic logging</p> Source code in <code>src/autorag/logging.py</code> <pre><code>def setup_logging(log_level: LogLevel = LogLevel.INFO):\n    \"\"\"Setup basic logging\"\"\"\n    log_format = \"[%(asctime)s] %(levelname)s:%(name)s:%(message)s\"\n    numeric_level = getattr(logging, log_level.upper(), None)\n    logging.basicConfig(level=numeric_level, stream=sys.stdout, format=log_format, datefmt=\"%Y-%m-%d %H:%M:%S\")\n</code></pre>"},{"location":"reference/autorag/init/","title":"Init","text":""},{"location":"reference/autorag/init/#autorag.init","title":"<code>init</code>","text":""},{"location":"reference/autorag/init/#autorag.init.__all__","title":"<code>__all__ = ['CPUSpecs', 'DiskSpecs', 'GPUSpecs', 'MemorySpecs', 'OSSpecs', 'SystemSpecs', 'generate_system_specs']</code>  <code>module-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.CPUSpecs","title":"<code>CPUSpecs</code>","text":""},{"location":"reference/autorag/init/#autorag.init.CPUSpecs.brand","title":"<code>brand: str = Field(description='CPU brand', default='N/A')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.CPUSpecs.cores","title":"<code>cores: int = Field(description='Number of CPU cores', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.CPUSpecs.model","title":"<code>model: str = Field(description='CPU model', default='N/A')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.CPUSpecs.threads","title":"<code>threads: int = Field(description='Number of CPU threads', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.DiskSpecs","title":"<code>DiskSpecs</code>","text":""},{"location":"reference/autorag/init/#autorag.init.DiskSpecs.free","title":"<code>free: int = Field(description='Free disk space in bytes', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.DiskSpecs.total","title":"<code>total: int = Field(description='Total disk space in bytes', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.DiskSpecs.used","title":"<code>used: int = Field(description='Used disk space in bytes', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.GPUSpecs","title":"<code>GPUSpecs</code>","text":""},{"location":"reference/autorag/init/#autorag.init.GPUSpecs.load","title":"<code>load: float = Field(description='GPU load in percentage', default=0.0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.GPUSpecs.memory_free","title":"<code>memory_free: int = Field(description='Free memory in bytes', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.GPUSpecs.memory_total","title":"<code>memory_total: int = Field(description='Total memory in bytes', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.GPUSpecs.memory_used","title":"<code>memory_used: int = Field(description='Used memory in bytes', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.GPUSpecs.name","title":"<code>name: str = Field(description='GPU name', default='N/A')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.GPUSpecs.temperature","title":"<code>temperature: float = Field(description='Temperature in Celsius', default=0.0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.MemorySpecs","title":"<code>MemorySpecs</code>","text":""},{"location":"reference/autorag/init/#autorag.init.MemorySpecs.available","title":"<code>available: int = Field(description='Available memory in bytes', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.MemorySpecs.free","title":"<code>free: int = Field(description='Free memory in bytes', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.MemorySpecs.total","title":"<code>total: int = Field(description='Total memory in bytes', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.MemorySpecs.used","title":"<code>used: int = Field(description='Used memory in bytes', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.OSSpecs","title":"<code>OSSpecs</code>","text":""},{"location":"reference/autorag/init/#autorag.init.OSSpecs.docker","title":"<code>docker: bool = Field(description='Whether docker is installed', default=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.OSSpecs.docker_version","title":"<code>docker_version: str = Field(description='Docker version if docker is installed', default='N/A')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.OSSpecs.os","title":"<code>os: str = Field(description='OS', default='N/A')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.OSSpecs.os_version","title":"<code>os_version: str = Field(description='OS version', default='N/A')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.SystemSpecs","title":"<code>SystemSpecs</code>","text":""},{"location":"reference/autorag/init/#autorag.init.SystemSpecs.cpu","title":"<code>cpu: CPUSpecs = Field(description='CPU specs', default_factory=CPUSpecs)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.SystemSpecs.disk","title":"<code>disk: DiskSpecs = Field(description='Disk space', default_factory=DiskSpecs)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.SystemSpecs.gpus","title":"<code>gpus: list[GPUSpecs] = Field(description='List of GPUs', default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.SystemSpecs.memory","title":"<code>memory: MemorySpecs = Field(description='Memory space', default_factory=MemorySpecs)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.SystemSpecs.os","title":"<code>os: OSSpecs = Field(description='OS specs', default_factory=OSSpecs)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/#autorag.init.SystemSpecs.__repr__","title":"<code>__repr__() -&gt; str</code>","text":"Source code in <code>src/autorag/init/system_specs.py</code> <pre><code>def __repr__(self) -&gt; str:\n    return self.__str__()\n</code></pre>"},{"location":"reference/autorag/init/#autorag.init.SystemSpecs.__str__","title":"<code>__str__() -&gt; str</code>","text":"Source code in <code>src/autorag/init/system_specs.py</code> <pre><code>def __str__(self) -&gt; str:\n    return f\"\\n\\n{srsly.yaml_dumps(self.dict())}\\n\"\n</code></pre>"},{"location":"reference/autorag/init/generate_system_specs/","title":"Generate system specs","text":""},{"location":"reference/autorag/init/generate_system_specs/#autorag.init.generate_system_specs","title":"<code>generate_system_specs</code>","text":""},{"location":"reference/autorag/init/generate_system_specs/#autorag.init.generate_system_specs.__get_cpu_specs","title":"<code>__get_cpu_specs() -&gt; CPUSpecs</code>","text":"Source code in <code>src/autorag/init/generate_system_specs.py</code> <pre><code>def __get_cpu_specs() -&gt; CPUSpecs:\n    cpu_specs = CPUSpecs(\n        model=cpuinfo.get_cpu_info()[\"brand_raw\"],\n        brand=cpuinfo.get_cpu_info()[\"arch_string_raw\"],\n        cores=psutil.cpu_count(logical=False),\n        threads=psutil.cpu_count(logical=True),\n    )\n\n    return cpu_specs\n</code></pre>"},{"location":"reference/autorag/init/generate_system_specs/#autorag.init.generate_system_specs.__get_disk_specs","title":"<code>__get_disk_specs() -&gt; DiskSpecs</code>","text":"Source code in <code>src/autorag/init/generate_system_specs.py</code> <pre><code>def __get_disk_specs() -&gt; DiskSpecs:\n    disk = psutil.disk_usage(\"/\")\n    disk_specs = DiskSpecs(\n        total=disk.total,\n        used=disk.used,\n        free=disk.free,\n    )\n\n    return disk_specs\n</code></pre>"},{"location":"reference/autorag/init/generate_system_specs/#autorag.init.generate_system_specs.__get_gpu_specs","title":"<code>__get_gpu_specs() -&gt; list[GPUSpecs]</code>","text":"Source code in <code>src/autorag/init/generate_system_specs.py</code> <pre><code>def __get_gpu_specs() -&gt; list[GPUSpecs]:\n    gpu_specs = []\n    gpus = GPUtil.getGPUs()\n    if gpus:\n        for gpu in gpus:\n            gpu_specs.append(\n                GPUSpecs(\n                    name=gpu.name,\n                    memory_total=gpu.memoryTotal,\n                    memory_used=gpu.memoryUsed,\n                    memory_free=gpu.memoryFree,\n                    temperature=gpu.temperature,\n                    load=gpu.load,\n                )\n            )\n    return gpu_specs\n</code></pre>"},{"location":"reference/autorag/init/generate_system_specs/#autorag.init.generate_system_specs.__get_memory_specs","title":"<code>__get_memory_specs() -&gt; MemorySpecs</code>","text":"Source code in <code>src/autorag/init/generate_system_specs.py</code> <pre><code>def __get_memory_specs() -&gt; MemorySpecs:\n    memory = psutil.virtual_memory()\n    memory_specs = MemorySpecs(\n        total=memory.total,\n        available=memory.available,\n        used=memory.used,\n        free=memory.free,\n    )\n\n    return memory_specs\n</code></pre>"},{"location":"reference/autorag/init/generate_system_specs/#autorag.init.generate_system_specs.__get_os_specs","title":"<code>__get_os_specs() -&gt; OSSpecs</code>","text":"Source code in <code>src/autorag/init/generate_system_specs.py</code> <pre><code>def __get_os_specs() -&gt; OSSpecs:\n    docker_version_info = subprocess.run(\n        [\"docker\", \"version\", \"-f\", \"json\"],  # noqa: S603, S607\n        capture_output=True,\n        check=False,\n    )\n    docker_available = docker_version_info.returncode == 0\n    docker_version = \"N/A\"\n    if docker_available:\n        version_info_dict = srsly.json_loads(docker_version_info.stdout)\n        docker_version = version_info_dict[\"Client\"][\"Version\"]\n\n    os_specs = OSSpecs(\n        os=platform.system(),\n        os_version=platform.version(),\n        docker=docker_available,\n        docker_version=docker_version,\n    )\n\n    return os_specs\n</code></pre>"},{"location":"reference/autorag/init/generate_system_specs/#autorag.init.generate_system_specs.generate_system_specs","title":"<code>generate_system_specs(*, specs_file: Path, force: bool = False) -&gt; None</code>","text":"Source code in <code>src/autorag/init/generate_system_specs.py</code> <pre><code>def generate_system_specs(\n    *,\n    specs_file: Path,\n    force: bool = False,\n) -&gt; None:\n    logger.info(\"Starting AutoRAG initialization!\")\n\n    if specs_file.exists() and not force:\n        msg = f\"System specs file already exists at {specs_file}! \" \"To overwrite it, run `autorag init --force`\"\n        print_system_specs(specs_file)\n        logger.error(msg)\n        raise SystemExit(msg)\n\n    elif specs_file.exists() and force:\n        logger.warn(f\"Overwriting existing system specs file {specs_file}\")\n        specs_file.unlink()\n    else:\n        specs_file.parent.mkdir(parents=True, exist_ok=True)\n\n    specs = _get_system_specs()\n    _write_system_specs(specs, specs_file)\n\n    logger.info(\"AutoRAG initialization complete!\")\n</code></pre>"},{"location":"reference/autorag/init/generate_system_specs/#autorag.init.generate_system_specs.print_system_specs","title":"<code>print_system_specs(specs_file: Path) -&gt; None</code>","text":"Source code in <code>src/autorag/init/generate_system_specs.py</code> <pre><code>def print_system_specs(specs_file: Path) -&gt; None:\n    specs = read_system_specs(specs_file)\n    logger.info(f\"System specs at {specs_file}:{specs}\")\n</code></pre>"},{"location":"reference/autorag/init/generate_system_specs/#autorag.init.generate_system_specs.read_system_specs","title":"<code>read_system_specs(specs_file: Path) -&gt; SystemSpecs</code>","text":"Source code in <code>src/autorag/init/generate_system_specs.py</code> <pre><code>def read_system_specs(specs_file: Path) -&gt; SystemSpecs:\n    if not specs_file.exists():\n        msg = (\n            f\"System specs file not found at {specs_file}!\"\n            \" Run `autorag init` first or specify the correct spacs file path!\"\n        )\n        logger.error(msg)\n        raise FileNotFoundError(msg)\n    try:\n        specs = srsly.read_yaml(specs_file)\n    except Exception as e:\n        logger.error(f\"Error reading system specs from {specs_file}: {e}\")\n        raise\n    try:\n        specs = SystemSpecs(**specs)\n    except Exception as e:\n        logger.error(f\"Error parsing system specs from {specs_file}: {e}\")\n        raise\n    return specs\n</code></pre>"},{"location":"reference/autorag/init/system_specs/","title":"System specs","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs","title":"<code>system_specs</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.CPUSpecs","title":"<code>CPUSpecs</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.CPUSpecs.brand","title":"<code>brand: str = Field(description='CPU brand', default='N/A')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.CPUSpecs.cores","title":"<code>cores: int = Field(description='Number of CPU cores', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.CPUSpecs.model","title":"<code>model: str = Field(description='CPU model', default='N/A')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.CPUSpecs.threads","title":"<code>threads: int = Field(description='Number of CPU threads', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.DiskSpecs","title":"<code>DiskSpecs</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.DiskSpecs.free","title":"<code>free: int = Field(description='Free disk space in bytes', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.DiskSpecs.total","title":"<code>total: int = Field(description='Total disk space in bytes', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.DiskSpecs.used","title":"<code>used: int = Field(description='Used disk space in bytes', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.GPUSpecs","title":"<code>GPUSpecs</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.GPUSpecs.load","title":"<code>load: float = Field(description='GPU load in percentage', default=0.0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.GPUSpecs.memory_free","title":"<code>memory_free: int = Field(description='Free memory in bytes', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.GPUSpecs.memory_total","title":"<code>memory_total: int = Field(description='Total memory in bytes', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.GPUSpecs.memory_used","title":"<code>memory_used: int = Field(description='Used memory in bytes', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.GPUSpecs.name","title":"<code>name: str = Field(description='GPU name', default='N/A')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.GPUSpecs.temperature","title":"<code>temperature: float = Field(description='Temperature in Celsius', default=0.0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.MemorySpecs","title":"<code>MemorySpecs</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.MemorySpecs.available","title":"<code>available: int = Field(description='Available memory in bytes', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.MemorySpecs.free","title":"<code>free: int = Field(description='Free memory in bytes', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.MemorySpecs.total","title":"<code>total: int = Field(description='Total memory in bytes', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.MemorySpecs.used","title":"<code>used: int = Field(description='Used memory in bytes', default=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.OSSpecs","title":"<code>OSSpecs</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.OSSpecs.docker","title":"<code>docker: bool = Field(description='Whether docker is installed', default=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.OSSpecs.docker_version","title":"<code>docker_version: str = Field(description='Docker version if docker is installed', default='N/A')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.OSSpecs.os","title":"<code>os: str = Field(description='OS', default='N/A')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.OSSpecs.os_version","title":"<code>os_version: str = Field(description='OS version', default='N/A')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.SystemSpecs","title":"<code>SystemSpecs</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.SystemSpecs.cpu","title":"<code>cpu: CPUSpecs = Field(description='CPU specs', default_factory=CPUSpecs)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.SystemSpecs.disk","title":"<code>disk: DiskSpecs = Field(description='Disk space', default_factory=DiskSpecs)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.SystemSpecs.gpus","title":"<code>gpus: list[GPUSpecs] = Field(description='List of GPUs', default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.SystemSpecs.memory","title":"<code>memory: MemorySpecs = Field(description='Memory space', default_factory=MemorySpecs)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.SystemSpecs.os","title":"<code>os: OSSpecs = Field(description='OS specs', default_factory=OSSpecs)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.SystemSpecs.__repr__","title":"<code>__repr__() -&gt; str</code>","text":"Source code in <code>src/autorag/init/system_specs.py</code> <pre><code>def __repr__(self) -&gt; str:\n    return self.__str__()\n</code></pre>"},{"location":"reference/autorag/init/system_specs/#autorag.init.system_specs.SystemSpecs.__str__","title":"<code>__str__() -&gt; str</code>","text":"Source code in <code>src/autorag/init/system_specs.py</code> <pre><code>def __str__(self) -&gt; str:\n    return f\"\\n\\n{srsly.yaml_dumps(self.dict())}\\n\"\n</code></pre>"}]}